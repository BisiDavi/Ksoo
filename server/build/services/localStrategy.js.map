{"version":3,"sources":["../../src/services/localStrategy.js"],"names":["passportLogin","PassportLocalStrategy","usernameField","passwordField","session","passReqToCallback","req","email","password","done","error","Joi","validate","body","loginSchema","message","details","user","User","findOne","trim","comparePassword","err","isMatch","passport","use"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,aAAa,GAAG,IAAIC,uBAAJ,CACpB;AACEC,EAAAA,aAAa,EAAE,OADjB;AAEEC,EAAAA,aAAa,EAAE,UAFjB;AAGEC,EAAAA,OAAO,EAAE,KAHX;AAIEC,EAAAA,iBAAiB,EAAE;AAJrB,CADoB,EAOpB,OAAOC,GAAP,EAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,IAA7B,KAAsC;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAYC,aAAIC,QAAJ,CAAaN,GAAG,CAACO,IAAjB,EAAuBC,uBAAvB,CAAlB;;AACA,MAAIJ,KAAJ,EAAW;AACT,WAAOD,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEM,MAAAA,OAAO,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiBD;AAA5B,KAAd,CAAX;AACD;;AAED,MAAI;AACF,UAAME,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEZ,MAAAA,KAAK,EAAEA,KAAK,CAACa,IAAN;AAAT,KAAb,CAAnB;;AACA,QAAI,CAACH,IAAL,EAAW;AACT,aAAOR,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEM,QAAAA,OAAO,EAAE;AAAX,OAAd,CAAX;AACD;;AAEDE,IAAAA,IAAI,CAACI,eAAL,CAAqBb,QAArB,EAA+B,UAAUc,GAAV,EAAeC,OAAf,EAAwB;AACrD,UAAID,GAAJ,EAAS;AACP,eAAOb,IAAI,CAACa,GAAD,CAAX;AACD;;AACD,UAAI,CAACC,OAAL,EAAc;AACZ,eAAOd,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEM,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAX;AACD;;AAED,aAAON,IAAI,CAAC,IAAD,EAAOQ,IAAP,CAAX;AACD,KATD;AAUD,GAhBD,CAgBE,OAAOK,GAAP,EAAY;AACZ,WAAOb,IAAI,CAACa,GAAD,CAAX;AACD;AACF,CAhCmB,CAAtB;;AAmCAE,kBAASC,GAAT,CAAazB,aAAb","sourcesContent":["import passport from 'passport';\r\nimport { Strategy as PassportLocalStrategy } from 'passport-local';\r\nimport Joi from 'joi';\r\n\r\nimport User from '../models/User';\r\nimport { loginSchema } from './validators';\r\n\r\nconst passportLogin = new PassportLocalStrategy(\r\n  {\r\n    usernameField: 'email',\r\n    passwordField: 'password',\r\n    session: false,\r\n    passReqToCallback: true,\r\n  },\r\n  async (req, email, password, done) => {\r\n    const { error } = Joi.validate(req.body, loginSchema);\r\n    if (error) {\r\n      return done(null, false, { message: error.details[0].message });\r\n    }\r\n\r\n    try {\r\n      const user = await User.findOne({ email: email.trim() });\r\n      if (!user) {\r\n        return done(null, false, { message: 'Email does not exists.' });\r\n      }\r\n\r\n      user.comparePassword(password, function (err, isMatch) {\r\n        if (err) {\r\n          return done(err);\r\n        }\r\n        if (!isMatch) {\r\n          return done(null, false, { message: 'Incorrect password.' });\r\n        }\r\n\r\n        return done(null, user);\r\n      });\r\n    } catch (err) {\r\n      return done(err);\r\n    }\r\n  },\r\n);\r\n\r\npassport.use(passportLogin);\r\n"],"file":"localStrategy.js"}