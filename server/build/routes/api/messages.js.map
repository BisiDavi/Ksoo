{"version":3,"sources":["../../../src/routes/api/messages.js"],"names":["router","get","req","res","messages","Message","find","sort","createdAt","populate","json","map","m","toJSON","err","status","message","findById","params","id","post","requireJwtAuth","error","body","details","create","text","user","execPopulate","delete","tempMessage","role","findByIdAndRemove","put","findByIdAndUpdate","new"],"mappings":"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","sourcesContent":["import { Router } from 'express';\r\nimport requireJwtAuth from '../../middleware/requireJwtAuth';\r\nimport Message, { validateMessage } from '../../models/Message';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const messages = await Message.find().sort({ createdAt: 'desc' }).populate('user');\r\n\r\n    res.json({\r\n      messages: messages.map((m) => {\r\n        return m.toJSON();\r\n      }),\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Something went wrong.' });\r\n  }\r\n});\r\n\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const message = await Message.findById(req.params.id).populate('user');\r\n    if (!message) return res.status(404).json({ message: 'No message found.' });\r\n    res.json({ message: message.toJSON() });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Something went wrong.' });\r\n  }\r\n});\r\n\r\nrouter.post('/', requireJwtAuth, async (req, res) => {\r\n  const { error } = validateMessage(req.body);\r\n  if (error) return res.status(400).json({ message: error.details[0].message });\r\n\r\n  try {\r\n    let message = await Message.create({\r\n      text: req.body.text,\r\n      user: req.user.id,\r\n    });\r\n    message = await message.populate('user').execPopulate();\r\n\r\n    res.status(200).json({ message: message.toJSON() });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Something went wrong.' });\r\n  }\r\n});\r\n\r\nrouter.delete('/:id', requireJwtAuth, async (req, res) => {\r\n  try {\r\n    const tempMessage = await Message.findById(req.params.id).populate('user');\r\n    if (!(tempMessage.user.id === req.user.id || req.user.role === 'ADMIN'))\r\n      return res.status(400).json({ message: 'Not the message owner or admin.' });\r\n\r\n    const message = await Message.findByIdAndRemove(req.params.id).populate('user');\r\n    if (!message) return res.status(404).json({ message: 'No message found.' });\r\n    res.status(200).json({ message });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Something went wrong.' });\r\n  }\r\n});\r\n\r\nrouter.put('/:id', requireJwtAuth, async (req, res) => {\r\n  const { error } = validateMessage(req.body);\r\n  if (error) return res.status(400).json({ message: error.details[0].message });\r\n\r\n  try {\r\n    const tempMessage = await Message.findById(req.params.id).populate('user');\r\n    if (!(tempMessage.user.id === req.user.id || req.user.role === 'ADMIN'))\r\n      return res.status(400).json({ message: 'Not the message owner or admin.' });\r\n\r\n    let message = await Message.findByIdAndUpdate(\r\n      req.params.id,\r\n      { text: req.body.text, user: tempMessage.user.id },\r\n      { new: true },\r\n    );\r\n    if (!message) return res.status(404).json({ message: 'No message found.' });\r\n    message = await message.populate('user').execPopulate();\r\n\r\n    res.status(200).json({ message });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Something went wrong.' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"file":"messages.js"}