{"version":3,"sources":["../../src/routes/localAuth.js"],"names":["router","post","requireLocalAuth","req","res","token","user","generateJWT","me","toJSON","json","next","error","Joi","validate","body","registerSchema","status","send","message","details","email","password","name","username","existingUser","User","findOne","newUser","provider","avatar","faker","image","registerUser","err","get","logout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,IAAP,CAAY,QAAZ,EAAsBC,yBAAtB,EAAwC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpD,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAASC,WAAT,EAAd;AACA,QAAMC,EAAE,GAAGL,GAAG,CAACG,IAAJ,CAASG,MAAT,EAAX;AACAL,EAAAA,GAAG,CAACM,IAAJ,CAAS;AAAEL,IAAAA,KAAF;AAASG,IAAAA;AAAT,GAAT;AACD,CAJD;AAMAR,MAAM,CAACC,IAAP,CAAY,WAAZ,EAAyB,OAAOE,GAAP,EAAYC,GAAZ,EAAiBO,IAAjB,KAA0B;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAYC,aAAIC,QAAJ,CAAaX,GAAG,CAACY,IAAjB,EAAuBC,0BAAvB,CAAlB;;AACA,MAAIJ,KAAJ,EAAW;AACT,WAAOR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,EAAiBD;AAA5B,KAArB,CAAP;AACD;;AAED,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA;AAAzB,MAAsCrB,GAAG,CAACY,IAAhD;;AAEA,MAAI;AACF,UAAMU,YAAY,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEN,MAAAA;AAAF,KAAb,CAA3B;;AAEA,QAAII,YAAJ,EAAkB;AAChB,aAAOrB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AAED,QAAI;AACF,YAAMS,OAAO,GAAG,MAAM,IAAIF,aAAJ,CAAS;AAC7BG,QAAAA,QAAQ,EAAE,OADmB;AAE7BR,QAAAA,KAF6B;AAG7BC,QAAAA,QAH6B;AAI7BE,QAAAA,QAJ6B;AAK7BD,QAAAA,IAL6B;AAM7BO,QAAAA,MAAM,EAAEC,eAAMC,KAAN,CAAYF,MAAZ;AANqB,OAAT,CAAtB;AASAF,MAAAA,OAAO,CAACK,YAAR,CAAqBL,OAArB,EAA8B,CAACM,GAAD,EAAM5B,IAAN,KAAe;AAC3C,YAAI4B,GAAJ,EAAS,MAAMA,GAAN;AACT9B,QAAAA,GAAG,CAACM,IAAJ,CAAS;AAAES,UAAAA,OAAO,EAAE;AAAX,SAAT,EAF2C,CAEC;AAC7C,OAHD;AAID,KAdD,CAcE,OAAOe,GAAP,EAAY;AACZ,aAAOvB,IAAI,CAACuB,GAAD,CAAX;AACD;AACF,GAxBD,CAwBE,OAAOA,GAAP,EAAY;AACZ,WAAOvB,IAAI,CAACuB,GAAD,CAAX;AACD;AACF,CAnCD,E,CAqCA;;AACAlC,MAAM,CAACmC,GAAP,CAAW,SAAX,EAAsB,CAAChC,GAAD,EAAMC,GAAN,KAAc;AAClCD,EAAAA,GAAG,CAACiC,MAAJ;AACAhC,EAAAA,GAAG,CAACc,IAAJ,CAAS,KAAT;AACD,CAHD;eAKelB,M","sourcesContent":["import { Router } from 'express';\r\nimport Joi from 'joi';\r\nimport faker from 'faker';\r\n\r\nimport User from '../models/User';\r\nimport requireLocalAuth from '../middleware/requireLocalAuth';\r\nimport { registerSchema } from '../services/validators';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/login', requireLocalAuth, (req, res) => {\r\n  const token = req.user.generateJWT();\r\n  const me = req.user.toJSON();\r\n  res.json({ token, me });\r\n});\r\n\r\nrouter.post('/register', async (req, res, next) => {\r\n  const { error } = Joi.validate(req.body, registerSchema);\r\n  if (error) {\r\n    return res.status(422).send({ message: error.details[0].message });\r\n  }\r\n\r\n  const { email, password, name, username } = req.body;\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n\r\n    if (existingUser) {\r\n      return res.status(422).send({ message: 'Email is in use' });\r\n    }\r\n\r\n    try {\r\n      const newUser = await new User({\r\n        provider: 'email',\r\n        email,\r\n        password,\r\n        username,\r\n        name,\r\n        avatar: faker.image.avatar(),\r\n      });\r\n\r\n      newUser.registerUser(newUser, (err, user) => {\r\n        if (err) throw err;\r\n        res.json({ message: 'Register success.' }); // just redirect to login\r\n      });\r\n    } catch (err) {\r\n      return next(err);\r\n    }\r\n  } catch (err) {\r\n    return next(err);\r\n  }\r\n});\r\n\r\n// logout\r\nrouter.get('/logout', (req, res) => {\r\n  req.logout();\r\n  res.send(false);\r\n});\r\n\r\nexport default router;\r\n"],"file":"localAuth.js"}